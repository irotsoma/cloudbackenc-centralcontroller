/*
 * Copyright (C) 2016-2019  Irotsoma, LLC
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
/*
 * Created by irotsoma on 7/13/2016.
 */
package com.irotsoma.cloudbackenc.centralcontroller

import com.irotsoma.cloudbackenc.common.AuthenticationToken
import com.irotsoma.cloudbackenc.common.cloudservices.CloudServiceExtension
import com.irotsoma.cloudbackenc.common.cloudservices.CloudServiceExtensionList
import com.irotsoma.cloudbackenc.common.encryption.EncryptionException
import io.jsonwebtoken.Jwts
import org.junit.Test
import org.junit.runner.RunWith
import org.springframework.beans.factory.annotation.Value
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.boot.test.web.client.TestRestTemplate
import org.springframework.boot.web.server.LocalServerPort
import org.springframework.http.*
import org.springframework.test.context.junit4.SpringRunner
import java.security.KeyStore

/**
 * Integration tests for cloud services list controllers.  Assumes Google Drive extension is installed as noted in comments.
 *
 * @author Justin Zak
 */

@RunWith(SpringRunner::class)
@SpringBootTest(webEnvironment=SpringBootTest.WebEnvironment.RANDOM_PORT)
class CloudServicesControllerIntegrationTests {
    @LocalServerPort
    private var port: Int = 0
    @Value("\${server.ssl.key-store}")
    private var useSSL: String? = null
    @Value("\${centralcontroller.api.v1.path}")
    private var apiV1Path: String = ""
    var protocol: String = "http"

    //test that rest endpoint for listing cloud services returns an HttpStatus.OK and google drive is included in the list of services
    @Test
    fun testGetCloudServicesList(){
        val restTemplate: TestRestTemplate
        if (useSSL!=null && useSSL!="") {
            protocol= "https"
            trustSelfSignedSSL()
            restTemplate = TestRestTemplate("test", "insecurepassword",TestRestTemplate.HttpClientOption.SSL)
        } else {
            protocol = "http"
            restTemplate = TestRestTemplate("test", "insecurepassword")
        }
        val testValue = restTemplate.getForEntity("$protocol://localhost:$port$apiV1Path/cloud-services", CloudServiceExtensionList::class.java)
        assert(testValue.statusCode==HttpStatus.OK)
        val testValue3 = restTemplate.getForEntity("$protocol://localhost:$port$apiV1Path/cloud-services/1d3cb21f-5b88-4b3c-8cb8-1afddf1ff375", CloudServiceExtensionList::class.java)
        assert(testValue3.statusCode==HttpStatus.OK)

        val expected = CloudServiceExtension("1d3cb21f-5b88-4b3c-8cb8-1afddf1ff375", "Google Drive", 1)
        //below is only valid when google drive plugin is installed in test extensions folder
        assert(testValue.body!!.contains(expected))
        assert(testValue3.body!!.contains(expected))

        val testValue2 = restTemplate.getForEntity("$protocol://localhost:$port$apiV1Path/cloud-services/user/test", CloudServiceExtensionList::class.java)
        assert(testValue2.statusCode==HttpStatus.OK)
        //below is only valid when google drive plugin is installed in test extensions folder
        assert(testValue2.body!!.contains(expected))
    }

    //tests user token generation and parsing
    @Test
    fun testTokenGeneration(){
        var restTemplate: TestRestTemplate
        //test with username/password
        if (useSSL!=null && useSSL!="") {
            protocol= "https"
            trustSelfSignedSSL()
            restTemplate = TestRestTemplate("test", "insecurepassword",TestRestTemplate.HttpClientOption.SSL)
        } else {
            protocol = "http"
            restTemplate = TestRestTemplate("test", "insecurepassword")
        }
        val testValue = restTemplate.getForEntity("$protocol://localhost:$port$apiV1Path/auth", AuthenticationToken::class.java)
        assert(testValue.statusCode==HttpStatus.OK)
        assert(testValue.hasBody())
        //test with token generated by username/password login (also refreshing tokens will use this)
        if (useSSL!=null && useSSL!="") {
            protocol= "https"
            trustSelfSignedSSL()
            restTemplate = TestRestTemplate(TestRestTemplate.HttpClientOption.SSL)
        } else {
            protocol = "http"
            restTemplate = TestRestTemplate()
        }
        val requestHeaders = HttpHeaders()
        requestHeaders.add(HttpHeaders.AUTHORIZATION, "Bearer ${testValue.body!!.token}")
        val httpEntity = HttpEntity<Any>(requestHeaders)
        val testValue2 = restTemplate.exchange("$protocol://localhost:$port$apiV1Path/auth",HttpMethod.GET, httpEntity, AuthenticationToken::class.java)
        assert(testValue2.statusCode==HttpStatus.OK)
        assert(testValue2.hasBody())
        val keyStore: KeyStore
        try {
            keyStore = KeyStore.getInstance("PKCS12")
            keyStore?.load(javaClass.classLoader.getResourceAsStream("security/keyStorePublic.p12"), "insecurepassword".toCharArray())
        } catch (e: Exception){
            throw EncryptionException("Unable to load JWT keystore.", e)
        }
        val cert = keyStore.getCertificate("cloudbackenccert")
        val roles = Jwts.parser()
                .setSigningKey(cert.publicKey)
                .parseClaimsJws(testValue2.body?.token)
                .body["roles"] as List<*>? ?: emptyList<String>()
        assert(roles.contains("ROLE_TEST"))
    }

    //below is only valid when google drive plugin is installed in extensions folder  (make sure compatible version is included in test resource folder)
    //doesn't actually log in to google, just tests plugin integration and rest endpoint for login
    @Test
    fun testGoogleDrivePluginIntegration(){
        val restTemplate: TestRestTemplate
        if (useSSL!=null && useSSL!="") {
            protocol= "https"
            trustSelfSignedSSL()
            restTemplate = TestRestTemplate("test", "insecurepassword", TestRestTemplate.HttpClientOption.SSL)
        } else {
            protocol = "http"
            restTemplate = TestRestTemplate("test", "insecurepassword")
        }
        val requestHeaders = HttpHeaders()
        requestHeaders.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
        val httpEntity = HttpEntity<CloudServiceUserRequest>(CloudServiceUserRequest("test",null,"1d3cb21f-5b88-4b3c-8cb8-1afddf1ff375", null), requestHeaders)
        val returnValue = restTemplate.postForEntity("$protocol://localhost:$port$apiV1Path/cloud-services/login/1d3cb21f-5b88-4b3c-8cb8-1afddf1ff375", httpEntity, CloudServiceUserRequest.STATE::class.java)
        assert(returnValue.body== CloudServiceUserRequest.STATE.TEST)

    }


}