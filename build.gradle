/*
 * Copyright (C) 2016-2018  Irotsoma, LLC
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

buildscript {
    ext.commonVersion = '0.3-SNAPSHOT'
    ext.springBootVersion = '2.0.0.RELEASE'
    ext.kotlinVersion = '1.2.21'
    ext.apacheCommonsValidatorVersion = '1.6'
    ext.apacheCommonsIoVersion = '1.3.2'
    ext.dokkaVersion = '0.9.14'
    ext.liquibaseGradleVersion = '1.2.4'
    ext.kotlinLoggingVersion = '1.5.3'
    ext.jjwtVersion = '0.9.0'
    ext.propdepsPluginVersion='0.0.10.RELEASE'
    ext.jacksonVersion='2.9.4'
    ext.swaggerVersion='2.8.0'

    repositories {
        jcenter()
        mavenCentral()
        maven {url 'http://repo.spring.io/plugins-release'}
    }
    dependencies {
        classpath "io.spring.gradle:propdeps-plugin:$propdepsPluginVersion"
        classpath "org.liquibase:liquibase-gradle-plugin:$liquibaseGradleVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion"
    }

    //try to pull repository credentials from either properties or environment variables
    ext.repoUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : System.getenv('ossrhUsername') ?: ''
    ext.repoPassword = project.hasProperty('ossrhPassword') ? ossrhPassword : System.getenv('ossrhPassword') ?: ''

}
plugins {
    id 'com.github.hierynomus.license' version '0.14.0'
}

group 'com.irotsoma.cloudbackenc'
version '0.3-SNAPSHOT'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'kotlin-kapt'
apply plugin: 'signing'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'propdeps'
apply plugin: 'org.liquibase.gradle'
def isReleaseVersion = !version.endsWith("SNAPSHOT")

if (isReleaseVersion){
    excludeDevtools = true
}
signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}
repositories {
    mavenCentral()
    //if the current project is a snapshot then allow using snapshot versions from maven central  Having this as an if prevents accidentally building a release version with snapshot dependencies.
    if (!isReleaseVersion){
        maven{
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
}

if (!isReleaseVersion) {
    configurations.all {
        // check for updates every build
        resolutionStrategy{
            cacheDynamicVersionsFor 0, 'seconds'
            cacheChangingModulesFor 0, 'seconds'
        }
    }
}
dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    //spring boot
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-log4j2'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-mail'
    //compile 'org.springframework.security.oauth:spring-security-oauth2'
    optional 'org.springframework.boot:spring-boot-devtools'
    optional 'org.springframework.boot:spring-boot-configuration-processor'
    kapt 'org.springframework.boot:spring-boot-configuration-processor'
    //common classes
    compile "com.irotsoma.cloudbackenc:common:$commonVersion"
    compile "com.irotsoma.cloudbackenc.common:cloudservices:$commonVersion"
    compile "com.irotsoma.cloudbackenc.common:encryption:$commonVersion"
    //jackson
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    //h2
    compile 'com.h2database:h2'
    //mariaDb
    compile 'org.mariadb.jdbc:mariadb-java-client'
    //liquibase
    compile 'org.liquibase:liquibase-core'
    //apache commons
    compile "org.apache.commons:commons-io:$apacheCommonsIoVersion"
    compile "commons-validator:commons-validator:$apacheCommonsValidatorVersion"
    //jjwt
    compile "io.jsonwebtoken:jjwt:$jjwtVersion"
    //logging
    compile "io.github.microutils:kotlin-logging:$kotlinLoggingVersion"
    //swagger
    compile "io.springfox:springfox-swagger2:$swaggerVersion"
    compile "io.springfox:springfox-swagger-ui:$swaggerVersion"
    //test
    testCompile 'org.springframework.boot:spring-boot-starter-test'


}
sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    main.resources.srcDirs += "$buildDir/license-reports/"
}

//exclude spring boot logging as it will conflict with the slf4j used by kotlin logging
configurations {
    all*.exclude module : 'spring-boot-starter-logging'
}
//allow for excluding certain tests via external configuration
test{
    exclude hasProperty('testExclude') ? testExclude : System.getenv('testExclude') ?: ''
}

//this section downloads some reports regarding the licenses of various dependencies and includes them in the
// META-INF/licenses folder
apply plugin: 'com.github.hierynomus.license'
license {
    ignoreFailures true
    mapping('kt', 'JAVADOC_STYLE')
    mapping('fxml', 'XML_STYLE')
    excludes(['**/*.json', '**/LICENSE', '**/*license*.html', '**/*license*.xml', '**/COPYING', '**/COPYING.LESSER', '**/*.jar', '**/*.dat'])
}
task copyLicenseReports(type: Copy) {
    from "$buildDir/reports/license/"
    into "$buildDir/license-reports/META-INF/licenses"
}
assemble.dependsOn 'downloadLicenses'
assemble.dependsOn 'copyLicenseReports'
copyLicenseReports.mustRunAfter 'downloadLicenses'

//javadoc stuff for Kotlin
apply plugin: 'org.jetbrains.dokka'
dokka {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/docs/javadoc"
}
task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from dokka.outputDirectory
}
task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

compileJava.dependsOn(processResources)

processResources {
    filesMatching('application.properties') {
        expand(project.properties)
    }
}

compileKotlin {
    kotlinOptions.jvmTarget= "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget= "1.8"
}
compileKotlin.dependsOn(processResources)
compileTestKotlin.dependsOn(processTestResources)
compileJava.dependsOn(processResources)
compileTestJava.dependsOn(processTestResources)
